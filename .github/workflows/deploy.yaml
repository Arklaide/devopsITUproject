name: Deploy to Digital Ocean
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET Core SDK 6.0.x
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 6.0.x
      - name: Setup .NET Core SDK 3.1.2
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 3.1.2
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --verbosity normal
      - name: Run .NET Code Analysis
        uses: dotnet/code-analysis@main
        id: code-analysis
        with:
          build-breaking: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build a Docker image
        run: docker build -f ./MinitweetApi/Dockerfile -t your/image-to-test .
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: your/image-to-test
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_docker_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Docker (login)
        run: doctl registry login
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push api
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}:MinitweetApi"
          push: true
          tags: registry.digitalocean.com/devopsitu/minitwitapi:latest
      - name: Build and push frontend
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}:MinitwitFrontend/MinitwitFrontend"
          push: true
          tags: registry.digitalocean.com/devopsitu/minitwitfrontend:latest
      - name: copy docker-compose.yml via ssh password
        uses: appleboy/scp-action@master
        with:
          host: "164.92.132.67"
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          source: "docker-compose.production.yml"
          target: "/root"
      - name: copy prometheus file
        uses: appleboy/scp-action@master
        with:
          host: "164.92.132.67"
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          source: "prometheus.yml"
          target: "/root"
      - name: Docker Compose Pull
        uses: appleboy/ssh-action@master
        with:
          host: "164.92.132.67"
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: docker-compose -f docker-compose.production.yml pull
      - name: Docker compose down
        uses: appleboy/ssh-action@master
        with:
          host: "164.92.132.67"
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: docker-compose -f docker-compose.production.yml down
      - name: Docker-compose up
        uses: appleboy/ssh-action@master
        with:
          host: "164.92.132.67"
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: docker stack deploy --compose-file docker-compose.production.yml --env-file .env minitwitswarm
